
Approch:
-------

->Find the height of the left subtree
->Find the height of the right subtree
->Find the left diameter and right diameter
->Then diameter is the maximum sum of the height
 of the left subtree plus the height of the right 
 subtree, the left diameter, and the right diameter. E.g. max( lh+rh,max(ld,rd))
 
 Code:
 ----
template <typename T>
class BinaryTreeNode {
  public:
    T data;
    BinaryTreeNode<T>* left;
    BinaryTreeNode<T>* right;

    BinaryTreeNode(T data) {
        this->data = data;
        left = NULL;
        right = NULL;
    }
};


//calculating the height of a binary tree
int height(BinaryTreeNode<int>* root) {
if (root == NULL) {
return 0;
}
return 1 + max(height(root->left), height(root->right));
}


int diameter(BinaryTreeNode<int>* root) {
//if the tree is empty
if (root == NULL) {
return 0;
}

// finding sum of the height of left subtree and right subtree
int option1 = height(root->left) + height(root->right);

// calculating the diameter of left subtree
int option2 = diameter(root->left);

// calculating the diameter of right subtree
int option3 = diameter(root->right);

// return the maximum of all the three options
return max(option1, max(option2, option3));
}
